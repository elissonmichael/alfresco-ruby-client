=begin
#Alfresco Content Services REST API

#**Search API** Provides access to the search features of Alfresco Content Services. 

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module Alfresco
  # A list of stats request.
  class RequestStats
    # The stats field
    attr_accessor :field

    # A label to include for reference the stats field
    attr_accessor :label

    # The minimum value of the field
    attr_accessor :min

    # The maximum value of the field
    attr_accessor :max

    # The sum of all values of the field
    attr_accessor :sum

    # The number which have a value for this field
    attr_accessor :count_values

    # The number which do not have a value for this field
    attr_accessor :missing

    # The average
    attr_accessor :mean

    # Standard deviation
    attr_accessor :stddev

    # Sum of all values squared
    attr_accessor :sum_of_squares

    # The set of all distinct values for the field (This can be very expensive to calculate)
    attr_accessor :distinct_values

    # The number of distinct values  (This can be very expensive to calculate)
    attr_accessor :count_distinct

    # A statistical approximation of the number of distinct values
    attr_accessor :cardinality

    # Number between 0.0 and 1.0 indicating how aggressively the algorithm should try to be accurate. Used with boolean cardinality flag.
    attr_accessor :cardinality_accuracy

    # A list of filters to exclude
    attr_accessor :exclude_filters

    # A list of percentile values, e.g. \"1,99,99.9\"
    attr_accessor :percentiles


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'field' => :'field',
        :'label' => :'label',
        :'min' => :'min',
        :'max' => :'max',
        :'sum' => :'sum',
        :'count_values' => :'countValues',
        :'missing' => :'missing',
        :'mean' => :'mean',
        :'stddev' => :'stddev',
        :'sum_of_squares' => :'sumOfSquares',
        :'distinct_values' => :'distinctValues',
        :'count_distinct' => :'countDistinct',
        :'cardinality' => :'cardinality',
        :'cardinality_accuracy' => :'cardinalityAccuracy',
        :'exclude_filters' => :'excludeFilters',
        :'percentiles' => :'percentiles'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'field' => :'String',
        :'label' => :'String',
        :'min' => :'BOOLEAN',
        :'max' => :'BOOLEAN',
        :'sum' => :'BOOLEAN',
        :'count_values' => :'BOOLEAN',
        :'missing' => :'BOOLEAN',
        :'mean' => :'BOOLEAN',
        :'stddev' => :'BOOLEAN',
        :'sum_of_squares' => :'BOOLEAN',
        :'distinct_values' => :'BOOLEAN',
        :'count_distinct' => :'BOOLEAN',
        :'cardinality' => :'BOOLEAN',
        :'cardinality_accuracy' => :'Float',
        :'exclude_filters' => :'Array<String>',
        :'percentiles' => :'Array<Float>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'field')
        self.field = attributes[:'field']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'min')
        self.min = attributes[:'min']
      else
        self.min = true
      end

      if attributes.has_key?(:'max')
        self.max = attributes[:'max']
      else
        self.max = true
      end

      if attributes.has_key?(:'sum')
        self.sum = attributes[:'sum']
      else
        self.sum = true
      end

      if attributes.has_key?(:'countValues')
        self.count_values = attributes[:'countValues']
      else
        self.count_values = true
      end

      if attributes.has_key?(:'missing')
        self.missing = attributes[:'missing']
      else
        self.missing = true
      end

      if attributes.has_key?(:'mean')
        self.mean = attributes[:'mean']
      else
        self.mean = true
      end

      if attributes.has_key?(:'stddev')
        self.stddev = attributes[:'stddev']
      else
        self.stddev = true
      end

      if attributes.has_key?(:'sumOfSquares')
        self.sum_of_squares = attributes[:'sumOfSquares']
      else
        self.sum_of_squares = true
      end

      if attributes.has_key?(:'distinctValues')
        self.distinct_values = attributes[:'distinctValues']
      else
        self.distinct_values = false
      end

      if attributes.has_key?(:'countDistinct')
        self.count_distinct = attributes[:'countDistinct']
      else
        self.count_distinct = false
      end

      if attributes.has_key?(:'cardinality')
        self.cardinality = attributes[:'cardinality']
      else
        self.cardinality = false
      end

      if attributes.has_key?(:'cardinalityAccuracy')
        self.cardinality_accuracy = attributes[:'cardinalityAccuracy']
      else
        self.cardinality_accuracy = 0.3
      end

      if attributes.has_key?(:'excludeFilters')
        if (value = attributes[:'excludeFilters']).is_a?(Array)
          self.exclude_filters = value
        end
      end

      if attributes.has_key?(:'percentiles')
        if (value = attributes[:'percentiles']).is_a?(Array)
          self.percentiles = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          field == o.field &&
          label == o.label &&
          min == o.min &&
          max == o.max &&
          sum == o.sum &&
          count_values == o.count_values &&
          missing == o.missing &&
          mean == o.mean &&
          stddev == o.stddev &&
          sum_of_squares == o.sum_of_squares &&
          distinct_values == o.distinct_values &&
          count_distinct == o.count_distinct &&
          cardinality == o.cardinality &&
          cardinality_accuracy == o.cardinality_accuracy &&
          exclude_filters == o.exclude_filters &&
          percentiles == o.percentiles
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [field, label, min, max, sum, count_values, missing, mean, stddev, sum_of_squares, distinct_values, count_distinct, cardinality, cardinality_accuracy, exclude_filters, percentiles].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Alfresco.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
